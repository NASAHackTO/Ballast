Load Balancing Policies
=======================

Policies are expressions that evaluate to numeric values.  When a policy
is evaluated, the host with the lowest nonnegative value will be
returned to the client.  Hosts with negative values or whose last update
was more than host_timeout seconds in the past will be considered
down.  If more than one host has the lowest value, one will be chosen at
random.

Policy expressions are composed of terms corresponding to various load
metrics, special functions, and a subset of perl operators.  Long lines
may be broken with the line continuation operator ("\").

1. Operators

    Ballast policies support a subset of Perl operators.  See "man
    perlop" for detailed descriptions.  Precedence can be forced in the
    usual manner with parentheses.

    1.1. Arithmetic and String Operators

        ! ~ * / % + - << >> & | ^ ** abs() .

    1.2. Arithmetic Relational Operators

        < > <= >= == != <=>

    1.3. String Relational Operators

        cmp eq ge gt le lt ne

    1.4. Logical Operators

        && ||

    1.5. Conditional Operator

        ?:

    1.6. Binding Operators

        =~ !~

    1.7. Quote-like Operators

        q() qr()

            Note that only () may be used after q and qr and not any
            other dividers supported by perl (e.g. not q|this is a
            string|)


2. Functions

    Two special functions can be used to compute values across all
    sessions and associated users on each system.  Each function is
    given an expression argument, which is in the same form as a policy
    expression with the addition of some special terms that are listed
    in Section 3.3.  These functions are only available when the
    "user_load" setting has been kept enabled.

    2.1. product(expression)

        compute product of expression for all sessions on host

    2.2. sum(expression)

        compute sum of expression for all sessions on host


3. Terms

    The following standard terms may be used in addition to any terms
    inserted by a custom load_hook in Ballast agents.

    3.1. System Terms

        3.1.1. Miscellaneous

            arg0, arg1, ... argN

                nth extra argument given to client by user (counting
                begins at first argument after alias name as in
                "ballast alias_name arg0 arg1 ... argN).

            boot_time

                boot time in seconds since epoch

            host

                host name

            random

                random integer between 1 and 100

            sessions

                currently active ssh sessions (only available when
                "user_load" setting is enabled)

            time

                last data update in seconds since epoch

            uptime

                seconds since boot

            users

                users who have completed any ssh session (only
                available when "user_load" setting has been kept
                enabled)

        3.1.2. CPU Load

            cpu

                cpu time in jiffies since last data update

            cpus

                number of cpus

            intrs

                interrupts serviced since last update

            load_1

                average run queue length over last minute

            load_15

                average run queue length over last 15 minutes

            load_5

                average run queue length over last 5 minutes

            proc_forks

                process forks since last update

            proc_switches

                process context switches since last update

            procs

                currently active processes

        3.1.3. I/O Load

            io_ops

                i/o operations on all disks since last update

            io_read_sectors

                i/o sectors read on all disks since last update

            io_read_time

                i/o read time in seconds on all disks since last update

            io_reads

                i/o reads on all disks since last update

            io_sectors

                i/o sectors read/written on all disks since last update

            io_time

                i/o time in seconds on all disks since last update

            io_write_sectors

                i/o sectors written on all disks since last update

            io_write_time

                i/o write time in seconds on all disks since last update

            io_writes

                i/o writes on all disks since last update

        3.1.4. Memory Load

            page_in

                pages swapped in since last update

            page_out

                pages swapped out since last update

            ram

                used ram in kB

            ram_free

                free ram in kB

            ram_total

                total ram in kB

            swap

                swap space used in kB since last update

            swap_free

                free swap space in kB

            swap_in

                processes swapped in since last update

            swap_out

                processes swapped out since last update

            swap_total

                total swap space in kB

        3.1.5. Network Load

            net_bytes

                network bytes read/written on all interfaces since last update

            net_ops

                network operations on all interfaces since last update

            net_read_bytes

                network bytes read on all interfaces since last update

            net_reads

                network reads on all interfaces since last update

            net_write_bytes

                network bytes written on all interfaces since last update

            net_writes

                network writes on all interfaces since last update

    3.2. Invoking User Terms

        These terms (except client_ip and user_uid) are only available
        when the "user_load" setting has been kept enabled.

        3.2.1. User Load

            client_ip

                ip address of invoking client

            user_cpu

                average cpu time in jiffies per session of invoking user

            user_io_bytes

                average i/o bytes per session of invoking user
                    (available with agents on kernels >= 2.6.20)

            user_io_ops

                average i/o operations per session of invoking user
                    (available with agents on kernels >= 2.6.20)

            user_io_read_bytes

                average i/o bytes read per session of invoking user
                    (available with agents on kernels >= 2.6.20)

            user_io_reads

                average i/o reads per session of invoking user
                    (available with agents on kernels >= 2.6.20)

            user_io_write_bytes

                average i/o bytes written per session of invoking user
                    (available with agents on kernels >= 2.6.20)

            user_io_writes

                average i/o writes per session of invoking user
                    (available with agents on kernels >= 2.6.20)

            user_mem

                average memory usage in bytes per session of invoking user

            user_ram

                average ram usage in pages per session of invoking user

            user_sessions

                number of sessions of invoking user

            user_time

                average session time in seconds of invoking user

            user_uid

                uid of invoking user

        3.2.2. User Rank

            user_cpu_rank

                users with lower average cpu time per session than
                invoking user

            user_io_bytes_rank

                users with lower average i/o bytes per session than
                invoking user
                    (available with agents on kernels >= 2.6.20)

            user_io_ops_rank

                users with lower average i/o operations per session
                than invoking user
                    (available with agents on kernels >= 2.6.20)

            user_io_read_bytes_rank

                users with lower average i/o bytes read per session
                than invoking user
                    (available with agents on kernels >= 2.6.20)

            user_io_reads_rank

                users with lower average i/o reads per session than
                invoking user
                    (available with agents on kernels >= 2.6.20)

            user_io_write_bytes_rank

                users with lower average i/o bytes written per session
                than invoking user
                    (available with agents on kernels >= 2.6.20)

            user_io_writes_rank

                users with lower average i/o writes per session than
                invoking user
                    (available with agents on kernels >= 2.6.20)

            user_mem_rank

                users with lower average memory usage in bytes per
                session than invoking user

            user_ram_rank

                users with lower average ram usage per session than
                invoking user

            user_time_rank

                users with lower average session time than invoking user

            user_sessions_rank

                users with lower number of sessions than invoking user

    3.3. Product() and Sum() Terms

        These terms can only be used within the expression argument of
        the product() and sum() functions and are only available when
        the "user_load" setting has been kept enabled.  They are
        evaluated against each session/user on the system.

        3.3.1. Session Load

            session_i_cpu

                cpu time in jiffies of session i

            session_i_io_bytes

                i/o bytes of session i
                    (available with agents on kernels >= 2.6.20)

            session_i_io_ops

                i/o operations of session i
                    (available with agents on kernels >= 2.6.20)

            session_i_io_read_bytes

                i/o bytes read of session i
                    (available with agents on kernels >= 2.6.20)

            session_i_io_reads

                i/o reads of session i
                    (available with agents on kernels >= 2.6.20)

            session_i_io_write_bytes

                i/o bytes written of session i
                    (available with agents on kernels >= 2.6.20)

            session_i_io_writes

                i/o writes of session i
                    (available with agents on kernels >= 2.6.20)

            session_i_mem

                memory usage in bytes of session i

            session_i_ram

                ram usage in pages of session i

            session_i_time

                session time in seconds of session i

        3.3.2. User Load

            user_i_cpu

                average cpu time in jiffies per session of session i user

            user_i_io_bytes

                average i/o bytes per session of session i user
                    (available with agents on kernels >= 2.6.20)

            user_i_io_ops

                average i/o operations per session of session i user
                    (available with agents on kernels >= 2.6.20)

            user_i_io_read_bytes

                average i/o bytes read per session of session i user
                    (available with agents on kernels >= 2.6.20)

            user_i_io_reads

                average i/o reads per session of session i user
                    (available with agents on kernels >= 2.6.20)

            user_i_io_write_bytes

                average i/o bytes written per session of session i user
                    (available with agents on kernels >= 2.6.20)

            user_i_io_writes

                average i/o writes per session of session i user
                    (available with agents on kernels >= 2.6.20)

            user_i_mem

                average memory usage in bytes per session of session i user

            user_i_ram

                average ram usage in pages per session of session i user

            user_i_time

                average session time in seconds of session i user

            user_i_sessions

                number of sessions of session i user

        3.3.3. User Rank

            user_i_cpu_rank

                users with lower average cpu time per session than
                session i user

            user_i_io_bytes_rank

                users with lower average i/o bytes per session than
                session i user
                    (available with agents on kernels >= 2.6.20)

            user_i_io_ops_rank

                users with lower average i/o operations per session
                than session i user
                    (available with agents on kernels >= 2.6.20)

            user_i_io_read_bytes_rank

                users with lower average i/o bytes read per session
                than session i user
                    (available with agents on kernels >= 2.6.20)

            user_i_io_reads_rank

                users with lower average i/o reads per session than
                session i user
                    (available with agents on kernels >= 2.6.20)

            user_i_io_write_bytes_rank

                users with lower average i/o bytes written per session
                than session i user
                    (available with agents on kernels >= 2.6.20)

            user_i_io_writes_rank

                users with lower average i/o writes per session than
                session i user
                    (available with agents on kernels >= 2.6.20)

            user_i_mem_rank

                users with lower average memory usage in bytes per
                session than session i user
                    (available with agents on kernels >= 2.6.20)

            user_i_ram_rank

                users with lower average ram usage per session than
                session i user

            user_i_time_rank

                users with lower average session time than session i user

            user_i_sessions_rank

                users with lower number of sessions than session i user

    3.4. Absolute Terms

        These terms are used internally to compute differences between
        updates.  They are not meant to be used directly, but can be if
        desired.

        3.4.1. CPU Load

            d_cpu

                cpu time in jiffies since boot

            d_intrs

                interrupts serviced since boot

            d_proc_forks

                process forks since boot

            d_proc_switches

                process context switches since boot

        3.4.2. I/O Load

            d_io_ops

                i/o operations on all disks since boot

            d_io_read_sectors

                i/o read sectors on all disks since boot

            d_io_read_time

                i/o read time on all disks since boot

            d_io_reads

                i/o reads on all disks since boot

            d_io_sectors

                i/o sectors on all disks since boot

            d_io_time

                i/o time on all disks since boot

            d_io_write_sectors

                i/o operations on all disks since boot

            d_io_write_time

                i/o write time on all disks since boot

            d_io_writes

                i/o writes on all disks since boot

        3.4.3. Memory Load

            d_page_in

                pages swapped in since boot

            d_page_out

                pages swapped out since boot

            d_swap_in

                processes swapped in since boot

            d_swap_out

                processes swapped out since boot

        3.4.4. Network Load

            d_net_bytes

                network bytes read/written on all interfaces since boot

            d_net_ops

                network operations on all interfaces since boot

            d_net_read_bytes

                network bytes read on all interfaces since boot

            d_net_reads

                network reads on all interfaces since boot

            d_net_write_bytes

                network bytes written on all interfaces since boot

            d_net_writes

                network writes on all interfaces since boot


4. Conditional Policies

    The flexibility of Ballast policy expressions allows very advanced
    balancing policies to be specified.  A few example uses that may be
    combined arbitrarily are illustrated below.

    4.1. Client-Specific Balancing

        Balancing decisions can be made on a per-client basis using the
        client_ip term.  The basic form of a client-specific
        expression is:

            client_ip =~ qr(^10\.10\.\d+.\d+) ? expr1 : expr2

        In this case, clients on subnet 10.10.0.0/16 are balanced by
        expr1 while all other clients are balanced by expr2.  As an
        example, suppose a given border host functions as a file
        transfer proxy to internal hosts.  In this case, connections
        from that host would like to minimize I/O and network loads to
        achieve faster transfers whereas other hosts are still concerned
        with other metrics.

    4.2. Host-Specific Balancing

        Balancing decisions can be made on a per-host basis using the
        host term.  The basic form of a host-specific expression is:

            host eq q(host1) ? expr1 : expr2

        In this case, the load of host host1 is evaluated against expr1
        while all other hosts are evaluated against expr2.  As an
        example, suppose a system is being used for testing and should
        only be available if all other hosts are down.  Its expression
        can be set to a large value while others are balancing by the
        normal policy.

    4.3. User-Specific Balancing

        Balancing decision can be made on a per-user basis using the
        user_uid term.  The basic form of a user-specific expression is:

            user_uid == 1001 ? expr1 : expr2

        In this case, the user whose uid is 1001 will be balanced by
        expr1 while all other users will be balanced by expr2.  As an
        example, suppose premium/admin users are allowed to access all
        hosts while trial/normal users can only go to a certain subset.
        Additional user-specific policies are shown in the next section.

    4.4. User-Directed Balancing

        Balancing decisions can be influenced by the user (or by a
        program acting on the user's behalf) using additional arguments
        given on the command line.  The basic form of a user-directed
        expression is:

            arg0 eq q(name) ? expr1 : expr2

        In this case, if the first additional matches a predetermined
        name, expr1 will be used for balancing.  Otherwise, expr2 will
        be used.  As an example, suppose users wish to choose the
        balancing policy most relevant to each invocation.  In this
        case, an argument of "cpu" could be configured to balance by
        lowest cpu load, "mem" could be configured to balance by lowest
        memory load, etc.

    4.5. Host-Subset Balancing

        Balancing decisions can be made between a specific subset of
        hosts using additional arguments given on the command line.
        The basic form of a host-subset expression is:

            arg0 =~ (qr(^|,) . host . qr(,|$)) ? expr1 : -1

        In this case, if the first additional argument is a set of
        hosts separated by commas, any hosts contained in that set will
        be balanced by expr1 while all other hosts will be marked as
        unavailable with -1.  As an example, suppose another application
        derives a set of hosts that have a particular property that is
        beyond the scope of the balancer.  In this case, that
        application can invoke the balancer internally with that set of
        hosts to ensure that the host utilized will be available and
        have the lowest load.


5. Sample Policies

    The following sample policies corresponding to the policies
    described in the paper "doc/ballast.pdf".  Policies 5.4 to 5.8
    assume CPU load as the least load metric.

    5.1. Random

        random

    5.2. Round Robin

        It is not currently possible to specify a round robin policy.
        This will be added in the future.

    5.3. Least Users

        sessions

    5.4. Least Load

        cpu

    5.5. Predictive

        sum(user_i_cpu)

    5.6. Predictive Least Load

        cpu + sum(user_i_cpu)

    5.7. Predictive Average Overlap

        cpu + sum(user_i_cpu * \
            (user_i_time > user_time ? 1 : (user_i_time / user_time)))

    5.8. Predictive Overlap

        cpu + sum(user_i_cpu *                  \
            (session_i_time > user_i_time ? 0 : \
                (user_i_time - session_i_time) / user_time))

    5.9. Dynamic Least Load

        user_cpu_rank / users >= .75 && user_mem_rank / users >= .75 ? \
            cpu * mem :                                                \
            (user_mem_rank / users >= .75 ?                            \
                mem :                                                  \
                cpu)

    5.10. Dynamic Predictive Least Load

        user_cpu_rank / users >= .75 && user_mem_rank / users >= .75 ? \
            cpu * mem + sum(user_i_cpu * user_i_mem) :                 \
            (user_mem_rank / users >= .75 ?                            \
                mem + sum(user_i_mem) :                                \
                cpu + sum(user_i_cpu))

    5.11. Dynamic Predictive Average Overlap

        user_cpu_rank / users >= .75 && user_mem_rank / users >= .75 ?       \
            cpu * mem + sum(user_i_cpu * user_i_mem *                        \
                (user_i_time > user_time ? 1 : (user_i_time / user_time))) : \
            (user_mem_rank / users >= .75 ?                                  \
                mem + sum(user_i_mem *                                       \
                    (user_i_time > user_time ? 1 :                           \
                        (user_i_time / user_time))) :                        \
                cpu + sum(user_i_cpu *                                       \
                    (user_i_time > user_time ? 1 :                           \
                        (user_i_time / user_time))))

    5.12. Dynamic Predictive Overlap

        user_cpu_rank / users >= .75 && user_mem_rank / users >= .75 ? \
            cpu * mem + sum(user_i_cpu * user_i_mem *                  \
                (session_i_time > user_i_time ? 0 :                    \
                    (user_i_time - session_i_time) / user_time)) :     \
            (user_mem_rank / users >= .75 ?                            \
                mem + sum(user_i_mem *                                 \
                    (session_i_time > user_i_time ? 0 :                \
                        (user_i_time - session_i_time) / user_time)) : \
                cpu + sum(user_i_cpu *                                 \
                    (session_i_time > user_i_time ? 0 :                \
                        (user_i_time - session_i_time) / user_time)))

